<link phx-track-static rel="stylesheet" />
<.flash_group flash={@flash} />
<div class="grid sm:grid-cols-1 md:grid-cols-2 main">
  <div class="px-5 2xl:px-[10rem] py-[4rem] content-left">
    <div class="flex header flex-col lg:flex-row">
      <img class="flip-horizontally" src={~p"/images/logo.jpg"} alt="logo"
      id="logo">

      <h1
        class="ml-0 mt-5 lg:mt-0 lg:ml-5 text-brand header-title text-sm font-semibold leading-6"
      >
        Fedi-bot Chan
      </h1>
    </div>
    <div class="grid grid-cols-1">
      <p
        class="text-[2rem] mt-4 font-semibold leading-10 tracking-tighter mt-10 text-zinc-900"
      >
        RSS
      </p>
      <div class="flex flex-col">
        <div class="mt-10">
          <div id="loading" class="w-full flex flex-row justify-center items-center">
            <.icon name="hero-arrow-path-solid" class="mt-10 h-6 w-6 animate-spin" />
          </div>
          <div class="flex flex-row justify-center items-center" id="dry_run_form">
            <input
              class="group relative rounded-2xl px-6 py-4 text-sm font-semibold leading-6 text-zinc-900 lg:w-auto mr-5"
              type="checkbox"
              id="is_dry_run_input"
              name="is_dry_run_input"
            />
            <label for="is_dry_run_input"
              >Dry run mode:<br />Prints the RSS posts to console instead of
              tooting to fedi
            </label>
            <button
              class="bg-brand/5 text-brand rounded-full px-4 py-4 font-medium leading-6 ml-5"
              onclick="set_is_dry_run()"
            >
              Save
            </button>
          </div>
          <hr class="my-10" />
          <div class="flex flex-col justify-center items-center">
            <label for="scrape_interval_input" class="text-zinc-400 font-semibold">Scrape Interval </label>
            <div class="relative w-full mt-4">
              <input
                class="group relative rounded-2xl px-6 py-4 text-sm font-semibold leading-6 text-zinc-900 w-full"
                type="number"
                id="scrape_interval_input"
                name="scrape_interval_input"
              />
              <label
                for="scrape_interval_input"
                class="absolute right-[5rem] top-[1rem] text-zinc-500"
                >milliseconds</label>
            </div>
            <p class="text-zinc-500 ml-4 text-center mt-4 text-sm">
              Time in milliseconds between RSS URL scrapes. <br />
              Will scrape every
              <span id="scrape_interval_in_minutes">?</span> minute(s)
            </p>
            <button
              class="bg-brand/5 text-brand rounded-full px-4 py-4 font-medium leading-6 w-full mt-4"
              onclick="set_scrape_interval()"
            >
              Save
            </button>
          </div>
          <hr class="my-10" />
          <div class="flex flex-col justify-center items-center">
            <label for="max_age_input" class="text-zinc-400 font-semibold">Max age news item </label>
            <div class="relative w-full mt-4">
              <input
                class="group relative rounded-2xl px-6 py-4 text-sm font-semibold leading-6 text-zinc-900 w-full"
                type="number"
                id="max_age_input"
                name="max_age_input"
              />
              <label
                for="max_age_input"
                class="absolute right-[5rem] top-[1rem] text-zinc-500"
                >second(s)</label>
            </div>
            <p class="text-zinc-500 ml-4 text-center mt-4 text-sm">
              RSS item publish date cannot be older than
              <span id="max_age_in_minutes">?</span> minutes(s)
            </p>
            <button
              class="bg-brand/5 text-brand rounded-full px-4 py-4 font-medium leading-6 w-full mt-4"
              onclick="set_max_age()"
            >
              Save
            </button>
          </div>
          <hr class="my-10" />
          <div class="flex flex-col justify-center items-center">
            <label for="max_post_burst_amount_input" class="text-zinc-400 font-semibold"
              >Max post burst amount</label>
            <div class="relative w-full mt-4">
              <input
                class="group relative rounded-2xl px-6 py-4 text-sm font-semibold leading-6 text-zinc-900 w-full"
                type="number"
                id="max_post_burst_amount_input"
                name="max_post_burst_amount_input"
              />
              <label
                for="max_post_burst_amount_input"
                class="absolute right-[5rem] top-[1rem] text-zinc-500"
                >post(s)</label>
            </div>
            <p class="text-zinc-500 ml-4 text-center mt-4 text-sm">
              Publish last  
              <span id="max_post_burst_amount">?</span> RSS post(s) from a RSS feed.
            </p>
            <button
              class="bg-brand/5 text-brand rounded-full px-4 py-4 font-medium leading-6 w-full mt-4"
              onclick="set_max_post_burst_amount()"
            >
              Save
            </button>
          </div>
          <hr class="mt-10" />
          <div class="px-2 py-2 mt-4">
            <p
              class="text-[1.5rem] font-semibold leading-10 tracking-tighter text-zinc-900"
            >
              Watched URLs
            </p>
            <div class="mt-4">
              <ul class="w-full" id="urls_list">
                <li class="w-full py-4 text-neutral-500">Loading list...</li>
              </ul>
            </div>
          </div>
        </div>
        <div class="mt-10">
          <input
            placeholder="Enter new RSS url here... "
            onkeydown="add_url(event)"
            class="group relative rounded-2xl px-6 py-4 text-sm font-semibold leading-6 text-zinc-900 w-full border-solid border-2 border-zinc-300"
            id="url_input"
          />
          <button
            class="bg-brand/5 text-brand rounded-full px-4 py-4 my-4 font-medium leading-6 w-full"
            onclick="add_url()"
          >
            Add new RSS URL
          </button>
        </div>
        <hr class="mt-10" />
        <p class="text-zinc-500 ml-4 text-center mt-4 text-sm">
          This button triggers the initiation of a new job specifically tailored for a single RSS URL.
          The selection of the URL depends on its order in the scraping queue.
          Details regarding the next scheduled URL will be accessible in an upcoming release.  
        </p>
        <button
          class="bg-brand/5 text-brand rounded-full px-4 py-4 font-medium leading-6 mt-10"
          onclick="start_job()"
        >
          <.icon name="hero-task-solid" /> Initiate RSS fetch and post job
        </button>
      </div>
    </div>
  </div>
  <div class="banner-right hidden sm:hidden md:block">
    <img class="center-cropped-img" src={~p"/images/banner-right.gif"}
    alt="banner">
  </div>
</div>

<script>
  var loading_spinner = document.getElementById("loading");

  var urls_list = document.getElementById("urls_list");
  var url_input = document.getElementById("url_input");
  var is_dry_run_input = document.getElementById("is_dry_run_input");
  var max_post_burst_amount_input = document.getElementById(
    "max_post_burst_amount_input"
  );
  var scrape_interval_input = document.getElementById("scrape_interval_input");
  var scrape_interval_in_minutes = document.getElementById(
    "scrape_interval_in_minutes"
  );
  url_input.value = "";

  function get_urls() {
    const save_btn = (url) =>
      `<button class="flex-auto inline-block px-4 py-4  bg-brand/5 text-brand rounded-full" onclick="update_rss_url(this)" x-url-value="${url}">Save</button>`;
    const delete_btn = (url) =>
      `<button class="flex-auto inline-block px-4 py-4 text-zinc-500 rounded-full" onclick="delete_rss_url(this)" x-url-value="${url}">Delete</button>`;
    const checkbox = (is_enabled, url, index) => `
    <div class="flex items-center">
      <input
        type="checkbox"
        class="rounded-2xl ml-1 w-6 h-6"
        ${is_enabled ? "checked" : ""}/>
      <pre title="${url}" class="ml-2 my-2 px-4 py-2 bg-zinc-100 rounded-2xl w-full hover:overflow-x-scroll">${url}</pre>
    </div>
`;

    const hashtagsInput = (hashtags) => `
    <input type="text" value="${
      hashtags || ""
    }" placeholder="Enter hashtags comma seperated, without #" class= "rounded-2xl mb-2 border-solid border-3 border-zinc-300">
  `;
    const li_content = (is_enabled, url, index, hashtags) =>
      `
      ${checkbox(is_enabled, url, index)}
      ${hashtagsInput(hashtags)}
      ${save_btn(url)}
      ${delete_btn(url)}
      `;

    const list_item = (content) =>
      `<li class="flex flex-col w-full py-4 overflow-clip ">
        ${content}
      </li>`;

    loading.hidden = false;
    fetch("/api/rss/urls")
      .then((response) => response.json())
      .then((res) => {
        const list = res
        .sort((a, b) => a.url.localeCompare(b.url)) // sort alphabetically
        .reduce((prev, current, index) => {
          const li = list_item(
            li_content(current.is_enabled, current.url, index, current.hashtags)
          );
          return prev + li;
        }, "");
        urls_list.innerHTML = list;
      })
      .then((_) => (rss_urls.hidden = false))
      .catch((_) => {})
      .finally((_) => (loading.hidden = true));
  }

  function add_url(event) {

    var fromButtonPress = event === null || event === undefined;
    var pressedEnter = event?.keyCode == 13 && !event?.shiftKey;
    var canSubmit = fromButtonPress || pressedEnter;

    if (canSubmit && url_input.value && url_input.value.trim()) {
      const url = url_input.value.trim();
      var api_url = new URL("api/rss/urls", window.location.origin);
      api_url.searchParams.append("url", url);

      fetch(api_url, { method: "POST" })
        .then(() => url_input.value = "")
        .then(() =>  showToast('New RSS URL target added!'))
        .catch((e) => {
          console.log(e);
        })
        .finally(get_urls);
    }
  }

  function update_rss_url(event) {
    var url = event.attributes["x-url-value"].value;
    var is_enabled = Boolean(event.parentNode.children[0].children[0].checked);
    var newHashtags = event.parentNode.children[1].value;

    var api_url = new URL("api/rss/urls", window.location.origin);
    api_url.searchParams.append("url", url);
    api_url.searchParams.append("is_enabled", is_enabled);
    api_url.searchParams.append("hashtags", newHashtags);

    event.innerText ='Updating...'

    fetch(api_url, { method: "PATCH" })
      .then(get_urls)
      .then(() =>  showToast('RSS URL target updated!'))
      .catch((e) => {
        console.log(e);
      })
      .finally((    event.innerText ='Save'));
  }

  function delete_rss_url(event) {
    var url = event.attributes["x-url-value"].value;

    if (!confirm(`Are you sure you want to delete ${url}?\n\rThis action cannot be undone.`)) {
      return;
    }

    var api_url = new URL("api/rss/urls", window.location.origin);
    api_url.searchParams.append("url", url);

    event.innerText ='Saving...'

    fetch(api_url, { method: "DELETE" })
      .then(get_urls)
      .then(() =>  showToast(`${url} deleted!`))
      .catch((e) => {
        event.innerText ='Delete'

        console.log(e);
      })
      .finally(_ => event.innerText ='Delete')
  }

  function start_job() {
    if (!confirm("Sure to start the RSS job?")) {
      return;
    }

    var api_url = new URL("api/rss/job", window.location.origin);
    loading_spinner.style.display = 'flex';

    fetch(api_url, { method: "POST" })
      .then(console.debug)
      .then(() =>  showToast('Job started!'))
      .catch((e) => {
        console.log(e);
      })
      .finally((loading_spinner.hidden = true));
  }

  function get_is_dry_run() {
    loading_spinner.style.display = 'flex';
    fetch("api/rss/settings/is_dry_run")
      .then((res) => res.json())
      .then((res) => (is_dry_run_input.checked = res))
      .catch((_) => {})
      .finally((_) => {
        loading_spinner.style.display = 'none';
        dry_run_form.style.display = 'flex';
      });
  }

  function set_is_dry_run() {
    if (!confirm("Sure to change dry run mode?")) {
      return;
    }
    
    loading_spinner.style.display = 'flex';
    dry_run_form.style.display = 'none';

    var api_url = new URL(
      "api/rss/settings/is_dry_run",
      window.location.origin
    );
    api_url.searchParams.append("is_dry_run", is_dry_run_input.checked);

    fetch(api_url, { method: "PUT" })
      .then(get_is_dry_run)
      .then(() =>  showToast(`Dry run setting updated!`))
      .catch((e) => {
        console.log(e);
      })
  }

  function get_scrape_interval() {
    fetch("api/rss/settings/scrape_interval")
      .then((res) => res.json())
      .then((res) => (scrape_interval_input.value = res))
      .then(previewIntervalInMinutes)
      .catch((_) => {})
  }

  function set_scrape_interval() {
    if (!confirm("Sure to change scrape interval?")) {
      return;
    }

    var api_url = new URL(
      "api/rss/settings/scrape_interval",
      window.location.origin
    );
    api_url.searchParams.append(
      "rss_scrape_interval_in_ms",
      scrape_interval_input.value
    );

    fetch(api_url, { method: "PUT" })
      .then(get_scrape_interval)
      .then(() =>  showToast(`Scrape interval setting updated!`))
      .catch((e) => {
        console.log(e);
      })
  }

  function get_max_age() {
    fetch("api/rss/settings/max_age")
      .then((res) => res.json())
      .then((res) => (max_age_input.value = res))
      .then(previewMaxAgeInSeconds)
      .catch((_) => {})
  }

  function set_max_age() {
    if (!confirm("Sure to change scrape max age?")) {
      return;
    }

    var api_url = new URL("api/rss/settings/max_age", window.location.origin);
    api_url.searchParams.append("rss_scrape_max_age_in_s", max_age_input.value);

    fetch(api_url, { method: "PUT" })
      .then(get_max_age)
      .then(() =>  showToast(`Max age setting updated!`))
      .catch((e) => {
        console.log(e);
      })
  }

  function get_max_post_burst_amount() {
    fetch("api/rss/settings/max_post_burst_amount")
      .then((res) => res.json())
      .then((res) => (max_post_burst_amount_input.value = res))
      .then(previewMaxPostBurst)
      .catch((_) => {})
  }

  function set_max_post_burst_amount() {
    if (!confirm("Sure to change scrape max post burst amount?")) {
      return;
    }

    var api_url = new URL(
      "api/rss/settings/max_post_burst_amount",
      window.location.origin
    );
    api_url.searchParams.append(
      "max_post_burst_amount",
      max_post_burst_amount_input.value
    );

    fetch(api_url, { method: "PUT" })
      .then(get_max_post_burst_amount)
      .then(() =>  showToast(`Max post burst setting updated!`))
      .catch((e) => {
        console.log(e);
      })
  }

  function previewIntervalInMinutes() {
    var fixed = (scrape_interval_input.value / 60000).toFixed(2);
    var preview = fixed.replace(".00", "");
    scrape_interval_in_minutes.innerText = preview;
  }

    function previewMaxAgeInSeconds() {
      function secondsToMinutes(d) {
      d = Number(d);
      var m = Math.floor(d / 60);
      return m;
    }

    max_age_in_minutes.innerText = secondsToMinutes(max_age_input.value || 0);
  }
  function previewMaxPostBurst() {
    max_post_burst_amount.innerText = max_post_burst_amount_input.value;
  }

  max_age_input.addEventListener("input", previewMaxAgeInSeconds);
  scrape_interval_input.addEventListener("input", previewIntervalInMinutes);
  max_post_burst_amount_input.addEventListener("input", previewMaxPostBurst);

  loading_spinner.style.display = 'flex';
  dry_run_form.style.display = 'none';
  get_urls();
  get_scrape_interval();
  get_max_age();
  get_is_dry_run();
  get_max_post_burst_amount();
</script>
